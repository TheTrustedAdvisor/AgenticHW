#!/bin/bash

# Complete Reset Script f√ºecho -e "${YELLOW}Folgende Verzeichnisse/Dateien werden KOMPLETT GEL√ñSCHT:# 4. Requirements.txt l√∂schen
echo -e "${YELLOW}üì¶ L√∂sche Dependencies...$# 8. Tempor√§re & Backup Dateien l√∂schen
echo -e "${YELLOW}üóëÔ∏è  L√∂sche tempor√§re & Backup Dateien...${NC}"C}"
if [ -f "requirements.txt" ]; then
    rm -f requirements.txt
    echo -e "${GREEN}   ‚úì requirements.txt gel√∂scht${NC}"
    deleted_count=$((deleted_count + 1))
else
    echo -e "${YELLOW}   ‚Ä¢ requirements.txt nicht gefunden${NC}"
fi

# 5. Python Cache komplett l√∂schen "üóÇÔ∏è  src/automation/huawei/ (Komplettes Projektverzeichnis)"
echo "üß™ tests/ (Alle Test-Dateien)"
echo "üìö docs/ (Technische Dokumentation - wird aus deployment_standards.md rekonstruiert)"
echo "üì¶ requirements.txt (Dependencies)"
echo "üêç __pycache__/, *.pyc, *.pyo (Python Cache)"
echo "üî¨ .pytest_cache/, .coverage*, htmlcov/ (Test Cache)"
echo "üìã *.log, *.tmp, *.bak (Tempor√§re Dateien)"
echo ""
echo -e "${GREEN}Was BLEIBT ERHALTEN:${NC}"
echo "üìÑ deployment_standards.md (MASTER-Dokumentation f√ºr Rekonstruktion)"
echo "üìã Requirements.md (Projekt-Anforderungen)"
echo "üêç .venv/ (Virtual Environment)"
echo "üìÑ demo.sh, reset.sh (Management Scripts)"
echo "üåê .git/ (Git Repository)"rk Automation Suite
# L√∂scht ALLES und erm√∂glicht komplette Projekt-Rekonstruktion aus deployment_standards.md

# Farben f√ºr bessere Lesbarkeit
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}üèóÔ∏è  COMPLETE RESET: Infrastructure as Code${NC}"
echo -e "${BLUE}Huawei Network Automation Suite - Total Cleanup${NC}"
echo -e "${BLUE}============================================================${NC}"
echo ""

# Funktion f√ºr Best√§tigung
confirm() {
    read -p "$(echo -e ${YELLOW}$1${NC}) [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

# Warnung anzeigen
echo -e "${RED}‚ö†Ô∏è  WARNUNG: KOMPLETTER PROJECT RESET!${NC}"
echo -e "${RED}Dieses Script l√∂scht ALLE generierten Projektdateien!${NC}"
echo ""
echo -e "${PURPLE}üìã Infrastructure as Code Prinzip:${NC}"
echo "‚Ä¢ Alle Komponenten werden aus deployment_standards.md rekonstruierbar"
echo "‚Ä¢ Echter 'Clean Slate' f√ºr kompletten Neuaufbau"
echo "‚Ä¢ Nur Dokumentation und .venv bleiben erhalten"
echo ""
echo -e "${YELLOW}Folgende Verzeichnisse/Dateien werden KOMPLETT GEL√ñSCHT:${NC}"
echo "üóÇÔ∏è  src/automation/huawei/ (Komplettes Projektverzeichnis)"
echo "üß™ tests/ (Alle Test-Dateien)"
echo "üì¶ requirements.txt (Dependencies)"
echo "üêç __pycache__/, *.pyc, *.pyo (Python Cache)"
echo "üî¨ .pytest_cache/, .coverage*, htmlcov/ (Test Cache)"
echo "üìã *.log, *.tmp, *.bak (Tempor√§re Dateien)"
echo ""
echo -e "${GREEN}Was BLEIBT ERHALTEN:${NC}"
echo "üìö *.md Dateien (Dokumentation)"
echo "ÔøΩ docs/ (Technische Dokumentation mit Mermaid-Diagrammen)"
echo "ÔøΩüêç .venv/ (Virtual Environment)"
echo "üìÑ demo.sh, reset.sh (Management Scripts)"
echo "üåê .git/ (Git Repository)"
echo ""

if ! confirm "üö® M√∂chten Sie WIRKLICH das komplette Projekt zur√ºcksetzen?"; then
    echo -e "${YELLOW}Reset abgebrochen.${NC}"
    echo ""
    echo -e "${BLUE}üí° Alternative: Verwenden Sie das alte reset.sh f√ºr partielles Cleanup${NC}"
    exit 0
fi

echo ""
echo -e "${BLUE}üßπ Starte KOMPLETTES Projekt-Reset...${NC}"
echo ""

# Z√§hler f√ºr gel√∂schte Elemente
deleted_count=0

# 1. Hauptprojektverzeichnis l√∂schen
echo -e "${YELLOW}ÔøΩÔ∏è  L√∂sche Hauptprojektverzeichnis...${NC}"
if [ -d "src" ]; then
    rm -rf src/
    echo -e "${GREEN}   ‚úì src/ Verzeichnis komplett gel√∂scht${NC}"
    deleted_count=$((deleted_count + 1))
else
    echo -e "${YELLOW}   ‚Ä¢ src/ Verzeichnis nicht gefunden${NC}"
fi

# 2. Test-Verzeichnis l√∂schen
echo -e "${YELLOW}üß™ L√∂sche Test-Verzeichnis...${NC}"
if [ -d "tests" ]; then
    rm -rf tests/
    echo -e "${GREEN}   ‚úì tests/ Verzeichnis komplett gel√∂scht${NC}"
    deleted_count=$((deleted_count + 1))
else
    echo -e "${YELLOW}   ‚Ä¢ tests/ Verzeichnis nicht gefunden${NC}"
fi

# 3. Dokumentations-Verzeichnis l√∂schen
echo -e "${YELLOW}üìö L√∂sche Dokumentations-Verzeichnis...${NC}"
if [ -d "docs" ]; then
    rm -rf docs/
    echo -e "${GREEN}   ‚úì docs/ Verzeichnis komplett gel√∂scht${NC}"
    deleted_count=$((deleted_count + 1))
else
    echo -e "${YELLOW}   ‚Ä¢ docs/ Verzeichnis nicht gefunden${NC}"
fi

# 4. Requirements.txt l√∂schen
echo -e "${YELLOW}üì¶ L√∂sche Dependencies...${NC}"
if [ -f "requirements.txt" ]; then
    rm -f requirements.txt
    echo -e "${GREEN}   ‚úì requirements.txt gel√∂scht${NC}"
    deleted_count=$((deleted_count + 1))
else
    echo -e "${YELLOW}   ‚Ä¢ requirements.txt nicht gefunden${NC}"
fi

# 4. Python Cache komplett l√∂schen
echo -e "${YELLOW}üêç L√∂sche Python Cache (rekursiv)...${NC}"

# __pycache__ Ordner
pycache_dirs=$(find . -type d -name "__pycache__" -not -path "./.venv/*" 2>/dev/null | wc -l)
if [ $pycache_dirs -gt 0 ]; then
    find . -type d -name "__pycache__" -not -path "./.venv/*" -exec rm -rf {} + 2>/dev/null
    echo -e "${GREEN}   ‚úì $pycache_dirs __pycache__ Ordner gel√∂scht${NC}"
    deleted_count=$((deleted_count + pycache_dirs))
else
    echo -e "${YELLOW}   ‚Ä¢ Keine __pycache__ Ordner gefunden${NC}"
fi

# .pyc/.pyo Dateien
pyc_files=$(find . -name "*.pyc" -o -name "*.pyo" -not -path "./.venv/*" 2>/dev/null | wc -l)
if [ $pyc_files -gt 0 ]; then
    find . -name "*.pyc" -o -name "*.pyo" -not -path "./.venv/*" -delete
    echo -e "${GREEN}   ‚úì $pyc_files Python Bytecode Dateien gel√∂scht${NC}"
    deleted_count=$((deleted_count + pyc_files))
else
    echo -e "${YELLOW}   ‚Ä¢ Keine .pyc/.pyo Dateien gefunden${NC}"
fi

# 6. Test & Coverage Cache l√∂schen
echo -e "${YELLOW}üî¨ L√∂sche Test & Coverage Cache...${NC}"

# .pytest_cache
if [ -d ".pytest_cache" ]; then
    rm -rf .pytest_cache
    echo -e "${GREEN}   ‚úì .pytest_cache Ordner gel√∂scht${NC}"
    deleted_count=$((deleted_count + 1))
fi

# Coverage Dateien
coverage_files=$(find . -name ".coverage*" -not -path "./.venv/*" 2>/dev/null | wc -l)
if [ $coverage_files -gt 0 ]; then
    find . -name ".coverage*" -not -path "./.venv/*" -delete
    echo -e "${GREEN}   ‚úì $coverage_files Coverage Dateien gel√∂scht${NC}"
    deleted_count=$((deleted_count + coverage_files))
fi

# htmlcov
if [ -d "htmlcov" ]; then
    rm -rf htmlcov
    echo -e "${GREEN}   ‚úì htmlcov Ordner gel√∂scht${NC}"
    deleted_count=$((deleted_count + 1))
fi

# .tox
if [ -d ".tox" ]; then
    rm -rf .tox
    echo -e "${GREEN}   ‚úì .tox Ordner gel√∂scht${NC}"
    deleted_count=$((deleted_count + 1))
fi

# 6. Tempor√§re & Backup Dateien l√∂schen
echo -e "${YELLOW}ÔøΩÔ∏è  L√∂sche tempor√§re & Backup Dateien...${NC}"
temp_files=$(find . -name "*.log" -o -name "*.tmp" -o -name "*.bak" -o -name "*~" -o -name "*.swp" -not -path "./.venv/*" -not -path "./.git/*" 2>/dev/null | wc -l)
if [ $temp_files -gt 0 ]; then
    find . -name "*.log" -o -name "*.tmp" -o -name "*.bak" -o -name "*~" -o -name "*.swp" -not -path "./.venv/*" -not -path "./.git/*" -delete
    echo -e "${GREEN}   ‚úì $temp_files tempor√§re/Backup Dateien gel√∂scht${NC}"
    deleted_count=$((deleted_count + temp_files))
else
    echo -e "${YELLOW}   ‚Ä¢ Keine tempor√§ren Dateien gefunden${NC}"
fi

echo ""
echo -e "${BLUE}============================================================${NC}"
echo -e "${GREEN}‚úÖ KOMPLETTER RESET ERFOLGREICH ABGESCHLOSSEN!${NC}"
echo ""
echo -e "${GREEN}üìä Zusammenfassung:${NC}"
echo -e "   ‚Ä¢ Insgesamt $deleted_count Dateien/Ordner gel√∂scht"
echo -e "   ‚Ä¢ Projekt komplett auf 'Clean Slate' zur√ºckgesetzt"
echo -e "   ‚Ä¢ Bereit f√ºr vollst√§ndige Rekonstruktion"
echo ""
echo -e "${BLUE}üèóÔ∏è  Infrastructure as Code - Rekonstruktion:${NC}"
echo -e "   1. ${GREEN}Lesen Sie deployment_standards.md${NC} f√ºr vollst√§ndige Anweisungen"
echo -e "   2. ${GREEN}Alle Komponenten${NC} k√∂nnen aus der Dokumentation rekonstruiert werden"
echo -e "   3. ${GREEN}docs/ Verzeichnis${NC} wird aus deployment_standards.md neu erstellt"
echo -e "   4. ${GREEN}Virtual Environment (.venv)${NC} bleibt f√ºr Dependencies erhalten"
echo -e "   5. ${GREEN}Git Repository${NC} und Master-Dokumentation unver√§ndert"
echo ""
echo -e "${PURPLE}ÔøΩ N√§chste Schritte:${NC}"
echo -e "   ‚Ä¢ Befolgen Sie die Rekonstruktions-Schritte in deployment_standards.md"
echo -e "   ‚Ä¢ Erstellen Sie Projektstruktur, Module, Templates und Tests neu"
echo -e "   ‚Ä¢ F√ºhren Sie ./demo.sh aus f√ºr vollst√§ndige Demo"
echo ""
echo -e "${YELLOW}üí° Dies ist echtes 'Infrastructure as Code' - alles aus Dokumentation reproduzierbar!${NC}"
echo -e "${BLUE}============================================================${NC}"
